/**
 * @author: Lin j
 * @date: 2022/11/30 22:50
 * @description：
 */

const brush = {
  state: {
    currentID:1,
    matchID:1,
    originData:[],
    matchedData:[],
    originFlood:[],
    matchedFlood:[],
    allDataLoading:false,
    originStart:0,
    originEnd:0,
    matchEnd:0,
    matchStart:0,
    //用来绘制滑动窗口的数据
    girdValues:[],
    originalGridValues:[],
    matchedIDValues:[],
    //匹配窗口的大小
    matchLength:30,
    completeFlag:false,
    //存储当前场次的时间数组
    currentTimeStamp:[
      '2020-01-22 08:00:00', '2020-01-22 09:00:00', '2020-01-22 10:00:00', '2020-01-22 11:00:00', '2020-01-22 12:00:00', '2020-01-22 13:00:00', '2020-01-22 14:00:00', '2020-01-22 15:00:00', '2020-01-22 16:00:00', '2020-01-22 17:00:00', '2020-01-22 18:00:00', '2020-01-22 19:00:00', '2020-01-22 20:00:00', '2020-01-22 21:00:00', '2020-01-22 22:00:00', '2020-01-22 23:00:00', '2020-01-23 00:00:00', '2020-01-23 01:00:00', '2020-01-23 02:00:00', '2020-01-23 03:00:00', '2020-01-23 04:00:00', '2020-01-23 05:00:00', '2020-01-23 06:00:00', '2020-01-23 07:00:00', '2020-01-23 08:00:00', '2020-01-23 09:00:00', '2020-01-23 10:00:00', '2020-01-23 11:00:00', '2020-01-23 12:00:00', '2020-01-23 13:00:00', '2020-01-23 14:00:00', '2020-01-23 15:00:00', '2020-01-23 16:00:00', '2020-01-23 17:00:00', '2020-01-23 18:00:00', '2020-01-23 19:00:00', '2020-01-23 20:00:00', '2020-01-23 21:00:00', '2020-01-23 22:00:00', '2020-01-23 23:00:00', '2020-01-24 00:00:00', '2020-01-24 01:00:00', '2020-01-24 02:00:00', '2020-01-24 03:00:00', '2020-01-24 04:00:00', '2020-01-24 05:00:00', '2020-01-24 06:00:00', '2020-01-24 07:00:00', '2020-01-24 08:00:00', '2020-01-24 09:00:00', '2020-01-24 10:00:00', '2020-01-24 11:00:00', '2020-01-24 12:00:00', '2020-01-24 13:00:00', '2020-01-24 14:00:00', '2020-01-24 15:00:00', '2020-01-24 16:00:00', '2020-01-24 17:00:00', '2020-01-24 18:00:00', '2020-01-24 19:00:00', '2020-01-24 20:00:00', '2020-01-24 21:00:00', '2020-01-24 22:00:00', '2020-01-24 23:00:00', '2020-01-25 00:00:00', '2020-01-25 01:00:00', '2020-01-25 02:00:00', '2020-01-25 03:00:00', '2020-01-25 04:00:00', '2020-01-25 05:00:00', '2020-01-25 06:00:00', '2020-01-25 07:00:00', '2020-01-25 08:00:00', '2020-01-25 09:00:00', '2020-01-25 10:00:00', '2020-01-25 11:00:00', '2020-01-25 12:00:00', '2020-01-25 13:00:00', '2020-01-25 14:00:00', '2020-01-25 15:00:00', '2020-01-25 16:00:00', '2020-01-25 17:00:00', '2020-01-25 18:00:00', '2020-01-25 19:00:00', '2020-01-25 20:00:00', '2020-01-25 21:00:00', '2020-01-25 22:00:00', '2020-01-25 23:00:00', '2020-01-26 00:00:00', '2020-01-26 01:00:00', '2020-01-26 02:00:00', '2020-01-26 03:00:00', '2020-01-26 04:00:00', '2020-01-26 05:00:00', '2020-01-26 06:00:00', '2020-01-26 07:00:00', '2020-01-26 08:00:00', '2020-01-26 09:00:00', '2020-01-26 10:00:00', '2020-01-26 11:00:00', '2020-01-26 12:00:00', '2020-01-26 13:00:00', '2020-01-26 14:00:00', '2020-01-26 15:00:00', '2020-01-26 16:00:00', '2020-01-26 17:00:00', '2020-01-26 18:00:00', '2020-01-26 19:00:00', '2020-01-26 20:00:00', '2020-01-26 21:00:00', '2020-01-26 22:00:00', '2020-01-26 23:00:00', '2020-01-27 00:00:00', '2020-01-27 01:00:00', '2020-01-27 02:00:00', '2020-01-27 03:00:00', '2020-01-27 04:00:00', '2020-01-27 05:00:00', '2020-01-27 06:00:00', '2020-01-27 07:00:00', '2020-01-27 08:00:00', '2020-01-27 09:00:00', '2020-01-27 10:00:00', '2020-01-27 11:00:00', '2020-01-27 12:00:00', '2020-01-27 13:00:00', '2020-01-27 14:00:00', '2020-01-27 15:00:00', '2020-01-27 16:00:00', '2020-01-27 17:00:00', '2020-01-27 18:00:00', '2020-01-27 19:00:00', '2020-01-27 20:00:00', '2020-01-27 21:00:00', '2020-01-27 22:00:00', '2020-01-27 23:00:00', '2020-01-28 00:00:00', '2020-01-28 01:00:00', '2020-01-28 02:00:00', '2020-01-28 03:00:00', '2020-01-28 04:00:00', '2020-01-28 05:00:00', '2020-01-28 06:00:00', '2020-01-28 07:00:00', '2020-01-28 08:00:00', '2020-01-28 09:00:00', '2020-01-28 10:00:00', '2020-01-28 11:00:00', '2020-01-28 12:00:00', '2020-01-28 13:00:00', '2020-01-28 14:00:00', '2020-01-28 15:00:00', '2020-01-28 16:00:00', '2020-01-28 17:00:00', '2020-01-28 18:00:00', '2020-01-28 19:00:00', '2020-01-28 20:00:00', '2020-01-28 21:00:00', '2020-01-28 22:00:00', '2020-01-28 23:00:00', '2020-01-29 00:00:00', '2020-01-29 01:00:00', '2020-01-29 02:00:00', '2020-01-29 03:00:00', '2020-01-29 04:00:00', '2020-01-29 05:00:00', '2020-01-29 06:00:00', '2020-01-29 07:00:00', '2020-01-29 08:00:00', '2020-01-29 09:00:00', '2020-01-29 10:00:00', '2020-01-29 11:00:00', '2020-01-29 12:00:00', '2020-01-29 13:00:00', '2020-01-29 14:00:00', '2020-01-29 15:00:00', '2020-01-29 16:00:00', '2020-01-29 17:00:00', '2020-01-29 18:00:00', '2020-01-29 19:00:00', '2020-01-29 20:00:00', '2020-01-29 21:00:00', '2020-01-29 22:00:00', '2020-01-29 23:00:00', '2020-01-30 00:00:00', '2020-01-30 01:00:00', '2020-01-30 02:00:00', '2020-01-30 03:00:00', '2020-01-30 04:00:00', '2020-01-30 05:00:00', '2020-01-30 06:00:00', '2020-01-30 07:00:00', '2020-01-30 08:00:00', '2020-01-30 09:00:00', '2020-01-30 10:00:00', '2020-01-30 11:00:00', '2020-01-30 12:00:00', '2020-01-30 13:00:00', '2020-01-30 14:00:00', '2020-01-30 15:00:00', '2020-01-30 16:00:00', '2020-01-30 17:00:00', '2020-01-30 18:00:00', '2020-01-30 19:00:00', '2020-01-30 20:00:00', '2020-01-30 21:00:00', '2020-01-30 22:00:00', '2020-01-30 23:00:00', '2020-01-31 00:00:00', '2020-01-31 01:00:00', '2020-01-31 02:00:00', '2020-01-31 03:00:00', '2020-01-31 04:00:00', '2020-01-31 05:00:00', '2020-01-31 06:00:00', '2020-01-31 07:00:00', '2020-01-31 08:00:00', '2020-01-31 09:00:00', '2020-01-31 10:00:00', '2020-01-31 11:00:00', '2020-01-31 12:00:00', '2020-01-31 13:00:00', '2020-01-31 14:00:00', '2020-01-31 15:00:00', '2020-01-31 16:00:00', '2020-01-31 17:00:00', '2020-01-31 18:00:00', '2020-01-31 19:00:00', '2020-01-31 20:00:00', '2020-01-31 21:00:00', '2020-01-31 22:00:00', '2020-01-31 23:00:00', '2020-02-01 00:00:00', '2020-02-01 01:00:00', '2020-02-01 02:00:00', '2020-02-01 03:00:00', '2020-02-01 04:00:00', '2020-02-01 05:00:00', '2020-02-01 06:00:00', '2020-02-01 07:00:00', '2020-02-01 08:00:00', '2020-02-01 09:00:00', '2020-02-01 10:00:00', '2020-02-01 11:00:00', '2020-02-01 12:00:00', '2020-02-01 13:00:00', '2020-02-01 14:00:00', '2020-02-01 15:00:00', '2020-02-01 16:00:00', '2020-02-01 17:00:00', '2020-02-01 18:00:00', '2020-02-01 19:00:00', '2020-02-01 20:00:00', '2020-02-01 21:00:00', '2020-02-01 22:00:00', '2020-02-01 23:00:00', '2020-02-02 00:00:00', '2020-02-02 01:00:00', '2020-02-02 02:00:00', '2020-02-02 03:00:00', '2020-02-02 04:00:00', '2020-02-02 05:00:00', '2020-02-02 06:00:00', '2020-02-02 07:00:00', '2020-02-02 08:00:00', '2020-02-02 09:00:00', '2020-02-02 10:00:00', '2020-02-02 11:00:00', '2020-02-02 12:00:00', '2020-02-02 13:00:00', '2020-02-02 14:00:00', '2020-02-02 15:00:00', '2020-02-02 16:00:00', '2020-02-02 17:00:00', '2020-02-02 18:00:00', '2020-02-02 19:00:00', '2020-02-02 20:00:00', '2020-02-02 21:00:00', '2020-02-02 22:00:00', '2020-02-02 23:00:00', '2020-02-03 00:00:00', '2020-02-03 01:00:00', '2020-02-03 02:00:00', '2020-02-03 03:00:00', '2020-02-03 04:00:00', '2020-02-03 05:00:00', '2020-02-03 06:00:00', '2020-02-03 07:00:00', '2020-02-03 08:00:00', '2020-02-03 09:00:00', '2020-02-03 10:00:00', '2020-02-03 11:00:00', '2020-02-03 12:00:00', '2020-02-03 13:00:00', '2020-02-03 14:00:00', '2020-02-03 15:00:00'
    ],
    //BrushResult中的loading标志
    sliderLoading:false,
  },
  mutations: {
    changeCurrentID:(state,id)=>{
      state.currentID = id
    },
    changeMatchID:(state,id)=>{
      state.matchID = id
    },
    changeOriginData:(state,data)=>{
      state.originData = data
    },
    changeMatchedData:(state,data)=>{
      state.matchedData = data
    },
    changeOriginFlood:(state,data)=>{
      state.originFlood = data
    },
    changeMatchedFlood:(state,data)=>{
      state.matchedFlood = data
    },
    changeAllDataLoading:(state,data)=>{
      state.allDataLoading = data
    },
    changeOriginStart:(state,data)=>{
      state.originStart = data
    },
    changeOriginEnd:(state,data)=>{
      state.originEnd = data
    },
    changeMatchEnd:(state,data)=>{
      state.matchEnd = data
    },
    changeMatchStart:(state,data)=>{
      state.matchStart = data
    },
    addGridValues:(state,data)=>{
      state.girdValues.push(data)
    },
    addOriginalGridValues:(state,data)=>{
      state.originalGridValues.push(data)
    },
    addMatchedIDValues:(state,data)=>{
      state.matchedIDValues.push(data)
    },
    clearGrid:(state)=>{
      state.originalGridValues = []
      state.girdValues = []
      state.matchedIDValues = []
    },
    setMatchLength:(state,data)=>{
      state.matchLength = data
    },
    setCompleteFlag:(state,data)=>{
      state.completeFlag = data
    },
    changeCurrentTimeStamp:(state,data)=>{
      state.currentTimeStamp = data
    },
    setSliderLoading:(state,data)=>{
      state.sliderLoading = data
    }
  },
  actions: {
    gridValueAsync(context,value){
        context.commit('addGridValues',value)
    },
    originalGridValueAsync(context,value){
      context.commit('addOriginalGridValues',value)
    }

  },
  getters:{
  }
}

export default brush
